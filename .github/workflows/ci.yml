# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  

jobs:
  test_code_quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn test jacoco:check --file pom.xml
    - name: Generate JaCoCo Badge
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
    - name: Commit the Jacoco badge (if it changed) # the generated badges have to be committed in order to be available on the readme.md file
      run: |
        if [[ `git status --porcelain *.svg` ]]; then
          git config --global user.name 'Carpe-frite'
          git config --global user.email 'jordi.guelpa@protonmail.com'
          git add *.svg
          git commit -m "Autogenerated JaCoCo coverage badge"
          git push
        fi

  build:
    runs-on: ubuntu-latest
    needs: test_code_quality

    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
   # - name: Build with Maven
   #   run: mvn -B package -DskipTests --file pom.xml

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze (with SONAR!!!)
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Carpe-frite_DevOpsDemo

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: artifact
        path: target/*.jar
        if-no-files-found: warn  
        retention-days: 1

  push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Downloading the Build Artifact!!!
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: target/*.jar
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: carpefrite/app:latest
          
